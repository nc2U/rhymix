name: Helm Deploy [main]

on:
  push:
    paths:
      - "deploy/helm/**"
      - ".github/workflows/helm_deploy.yml"
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build
    
    runs-on: ubuntu-latest
    
    steps:
      # 레파지터리 체크 아웃
      - name: Check out source code
        uses: actions/checkout@v4

      # Helm source to CI/CD server copy transfer
      - name: Copy helm, to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          source: 'deploy/helm,deploy/kubectl'
          target: ${{ secrets.CICD_PATH }}/deploy/
      
#      # helm upgrade --> install
#      - name: SSH Remote Commands from ci/cd server
#        uses: garygrossgarten/github-action-ssh@release
#        with:
#          host: ${{ secrets.CICD_HOST }}
#          username: ${{ secrets.CICD_USER }}
#          password: ${{ secrets.CICD_PASS }}
#          command: |
#            cd ${{ secrets.CICD_PATH }}/deploy/helm
#
#            if [ -e "./values-prod-custom.yaml" ]; then
#              echo "Custom values-prod-custom.yaml found. Running prod-deploy.sh..."
#              sh prod-deploy.sh
#
#              if [ $? -ne 0 ]; then
#                echo "prod-deploy.sh failed. Falling back to inline Helm deployment."
#                run_inline_helm_deploy=true
#              else
#                run_inline_helm_deploy=false
#              fi
#            else
#              echo "values-prod-custom.yaml not found. Proceeding with inline Helm deployment."
#              run_inline_helm_deploy=true
#            fi
#
#            if [ "$run_inline_helm_deploy" = true ]; then
#              kubectl apply -f ../kubectl/class-roles
#
#              if ! helm repo list | grep -q 'nfs-subdir-external-provisioner'; then
#                helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner
#              fi
#              if ! helm status nfs-subdir-external-provisioner -n kube-system >/dev/null 2>&1; then
#                 helm upgrade --install nfs-subdir-external-provisioner \
#                   nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
#                     -n kube-system \
#                     --set nfs.server=${{ secrets.CICD_HOST }} \
#                     --set nfs.path=/mnt/nfs-subdir-external-provisioner
#              fi
#
#              helm upgrade ${{ secrets.DATABASE_USER }} . -f ./values-prod.yaml \
#                --install -n ibs-prod --create-namespace --history-max 5 --wait --timeout 10m \
#                --set global.dbPassword=${{ secrets.DATABASE_PASS }} \
#                --set global.cicdServerHost=${{ secrets.CICD_HOST }} \
#                --set global.cicdPath=${{ secrets.CICD_PATH }} \
#                --set global.nfsServerHost=${{ secrets.NFS_HOST }} \
#                --set global.nfsPath=${{ secrets.NFS_PATH }} \
#                --set global.domainHost=${{ secrets.DOMAIN_HOST }} \
#                --set global.emailHost=${{ secrets.EMAIL_HOST }} \
#                --set global.emailHostUser=${{ secrets.EMAIL_HOST_USER }} \
#                --set-string global.emailHostPassword='${{ secrets.EMAIL_HOST_PASSWORD }}' \
#                --set global.defaultFromEmail=${{ secrets.EMAIL_DEFAULT_FROM }} \
#                --set postgres.auth.postgresPassword=${{ secrets.DATABASE_PASS }} \
#                --set postgres.auth.password=${{ secrets.DATABASE_PASS }} \
#                --set postgres.auth.replicationPassword=${{ secrets.DATABASE_PASS }} \
#                --set 'nginx.ingress.hosts[0].host'=${{ secrets.DOMAIN_NAME }} \
#                --set 'nginx.ingress.hosts[1].host'=www.${{ secrets.DOMAIN_NAME }} \
#                --set 'nginx.ingress.hosts[2].host'=dyibs.co.kr \
#                --set 'nginx.ingress.hosts[3].host'=brdnc.co.kr \
#                --set 'nginx.ingress.hosts[0].paths[0].path'=/ \
#                --set 'nginx.ingress.hosts[0].paths[0].pathType'=Prefix \
#                --set 'nginx.ingress.hosts[1].paths[0].path'=/ \
#                --set 'nginx.ingress.hosts[1].paths[0].pathType'=Prefix \
#                --set 'nginx.ingress.hosts[2].paths[0].path'=/ \
#                --set 'nginx.ingress.hosts[2].paths[0].pathType'=Prefix \
#                --set 'nginx.ingress.hosts[3].paths[0].path'=/ \
#                --set 'nginx.ingress.hosts[3].paths[0].pathType'=Prefix \
#                --set 'nginx.ingress.tls[0].hosts[0]'=${{ secrets.DOMAIN_NAME }} \
#                --set 'nginx.ingress.tls[0].hosts[1]'=www.${{ secrets.DOMAIN_NAME }} \
#                --set 'nginx.ingress.tls[0].hosts[2]'=dyibs.co.kr \
#                --set 'nginx.ingress.tls[0].hosts[3]'=brdnc.co.kr \
#                --set 'nginx.ingress.tls[0].secretName'=web-devbox-kr-cert
#            fi
      
      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
