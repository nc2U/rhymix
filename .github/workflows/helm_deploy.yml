name: Helm Deploy [main]

on:
  push:
    paths:
      - "deploy/helm/**"
      - ".github/workflows/helm_deploy.yml"
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# job은 사용자가 정한 플랫폼을 통해 steps 라는 일련의 과정을 실행.
# 여러 개의 job 을 사용할 수 있으며, 여러 개의 job 을 사용할 때는 서로 정보도 교환 가능.
# 각각 독립적으로도 실행 가능.
jobs:
  build:
    name: Build
    
    runs-on: ubuntu-latest
    
    steps:
      # 레파지터리 체크 아웃
      - name: Check out source code
        uses: actions/checkout@v4

      # Helm source to CI/CD server copy transfer
      - name: Copy helm, to CI/CD server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          source: 'deploy/helm,deploy/kubectl'
          target: ${{ secrets.CICD_PATH }}/
      
      # helm upgrade --> install
      - name: SSH Remote Commands from ci/cd server
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.CICD_HOST }}
          username: ${{ secrets.CICD_USER }}
          password: ${{ secrets.CICD_PASS }}
          command: |
            cd ${{ secrets.CICD_PATH }}/deploy/helm

            if [ -e "./values.yaml" ]; then
              echo "values.yaml found. Running deploy.sh..."
              sh deploy.sh

              if [ $? -ne 0 ]; then
                echo "deploy.sh failed. Falling back to inline Helm deployment."
                run_inline_helm_deploy=true
              else
                run_inline_helm_deploy=false
              fi
            else
              echo "values.yaml not found. Proceeding with inline Helm deployment."
              run_inline_helm_deploy=true
            fi

            if [ "$run_inline_helm_deploy" = true ]; then
              kubectl apply -f ../kubectl

              if ! helm repo list | grep -q 'nfs-subdir-external-provisioner'; then
                helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner
              fi
              if ! helm status rhymix-nfs-subdir-external-provisioner -n kube-system >/dev/null 2>&1; then
                helm upgrade --install rhymix nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
                  -n kube-system \
                  --set nfs.server=${{ secrets.NFS_HOST }} \
                  --set nfs.path=${{ secrets.NFS_PATH }}/volume/data \
                  --set storageClass.name=nfs-rhymix
              fi

              # Role 적용 및 Helm 배포
              kubectl apply -f ../kubectl/cluster-role.yaml
              helm upgrade rhymix . -f ./values.yaml \
                --install -n rhymix --create-namespace --history-max 5 --wait --timeout 10m \
                --set mariadb.auth.rootPassword=${{ secrets.MARIADB_PASSWORD }} \
                --set mariadb.auth.password=${{ secrets.MARIADB_PASSWORD }}
            fi
      
      # slack --> notification
      - name: Send slack when failed
        if: ${{ failure() }}                    # 실패했을 때 실행
        uses: ./.github/actions/slack-notify    # 직접 '만든' Action이므로 uses 키워드를 이용해서 아래 경로를 입력해줍니다.
        with:
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}

      - name: Send slack if completed
        if: ${{ success() }}                    # 성공할 때만 실행
        uses: ./.github/actions/slack-notify
        with:
          status: success   # status input은 받는 쪽에서 default 값을 정해놨기 때문에 success일 때만 전달.
          slack_incoming_url: ${{ secrets.SLACK_INCOMING_URL }}
