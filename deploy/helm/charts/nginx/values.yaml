# Default values for nginx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.29.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: [ ]
# This is to override the chart name.
nameOverride: "nginx"
fullnameOverride: "nginx"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: { }
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: { }

podSecurityContext: { }
# fsGroup: 2000

securityContext: { }
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: { }
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: snippets-conf
    configMap:
      name: nginx-config
      items:
        - key: SNIPPETS.CONF
          path: rhymix.conf
  - name: conf-d
    configMap:
      name: nginx-config
      items:
        - key: DEFAULT.CONF
          path: default.conf
  - name: nginx-html
    persistentVolumeClaim:
      claimName: rhymix-nginx-html-pvc
  - name: nginx-files
    persistentVolumeClaim:
      claimName: rhymix-nginx-files-pvc
  - name: layout
    persistentVolumeClaim:
      claimName: rhymix-nginx-layout-pvc
  - name: skin
    persistentVolumeClaim:
      claimName: rhymix-nginx-skin-pvc
  - name: install
    persistentVolumeClaim:
      claimName: rhymix-nginx-install-pvc

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: snippets-conf
    mountPath: /etc/nginx/snippets/rhymix.conf
    readOnly: true
    subPath: rhymix.conf
  - name: conf-d
    mountPath: /etc/nginx/conf.d/
    readOnly: true
  - name: nginx-html
    mountPath: /var/www/html
  - name: nginx-files
    mountPath: /var/www/html/_rhymix/files
  - name: layout
    mountPath: /var/www/html/_rhymix/layouts/ibs_layout
    readOnly: true
  - name: install
    mountPath: /var/www/html/_rhymix/modules/install/script
  - name: skin
    mountPath: /var/www/html/_rhymix/modules/board/skins/faq

nodeSelector: { }

tolerations: [ ]

affinity: { }
